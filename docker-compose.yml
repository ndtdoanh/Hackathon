version: "3.8"

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.14
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - microservice-networks
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 30s

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.14
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - microservice-networks
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.14
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - microservice-networks

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=12345
      - MYSQL_DATABASE=hacof
      - MYSQL_ROOT_HOST=%
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - microservice-networks
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p12345" ]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    container_name: eureka-server
    ports:
      - "8762:8761"
    networks:
      - microservice-networks

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "9192:9191"
    networks:
      - microservice-networks
    depends_on:
      eureka-server:
        condition: service_started
      redis:
        condition: service_started
      logstash:
        condition: service_started

  redis:
    image: redis:latest
    restart: always
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    networks:
      - microservice-networks

  identity-service:
    build:
      context: .
      dockerfile: identity-service/Dockerfile
    container_name: identity-service
    ports:
      - "9080:8080"
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - clientId=${CLIENT_ID}
      - clientSecret=${CLIENT_SECRET}
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - SPRING_APPLICATION_NAME=identity-service
    networks:
      - microservice-networks
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_started
      redis:
        condition: service_started
      logstash:
        condition: service_healthy

  hackathon-service:
    build:
      context: .
      dockerfile: hackathon-service/Dockerfile
    container_name: hackathon-service
    ports:
      - "9081:8081"
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - SPRING_APPLICATION_NAME=hackathon-service
    networks:
      - microservice-networks
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_started
      identity-service:
        condition: service_started
      logstash:
        condition: service_healthy

  submission-service:
    build:
      context: .
      dockerfile: submission-service/Dockerfile
    container_name: submission-service
    ports:
      - "9082:8082"
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - SPRING_APPLICATION_NAME=submission-service
    networks:
      - microservice-networks
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_started
      identity-service:
        condition: service_started
      logstash:
        condition: service_healthy

  communication-service:
    build:
      context: .
      dockerfile: communication-service/Dockerfile
    container_name: communication-service
    ports:
      - "9083:8083"
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - SPRING_APPLICATION_NAME=communication-service
    networks:
      - microservice-networks
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_started
      identity-service:
        condition: service_started
      logstash:
        condition: service_healthy

  analytics-service:
    build:
      context: .
      dockerfile: analytics-service/Dockerfile
    container_name: analytics-service
    ports:
      - "9084:8084"
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - SPRING_APPLICATION_NAME=analytics-service
    networks:
      - microservice-networks
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_started
      identity-service:
        condition: service_started
      logstash:
        condition: service_healthy

networks:
  microservice-networks:
    driver: bridge

volumes:
  mysql_data:
